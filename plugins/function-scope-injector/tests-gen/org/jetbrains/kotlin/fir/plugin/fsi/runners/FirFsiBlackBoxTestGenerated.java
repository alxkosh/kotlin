/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.fir.plugin.fsi.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/function-scope-injector/testData/box")
@TestDataPath("$PROJECT_ROOT")
public class FirFsiBlackBoxTestGenerated extends AbstractFirFsiBlackBoxTest {
    @Test
    public void testAllFilesPresentInBox() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/box/byFunctionName")
    @TestDataPath("$PROJECT_ROOT")
    public class ByFunctionName {
        @Test
        public void testAllFilesPresentInByFunctionName() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/box/byFunctionName"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/byFunctionName/localFunction.kt");
        }

        @Test
        @TestMetadata("memberFunction.kt")
        public void testMemberFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/byFunctionName/memberFunction.kt");
        }

        @Test
        @TestMetadata("topLevelFunction.kt")
        public void testTopLevelFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/byFunctionName/topLevelFunction.kt");
        }

        @Test
        @TestMetadata("twoFunctions.kt")
        public void testTwoFunctions() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/byFunctionName/twoFunctions.kt");
        }
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/box/fqn")
    @TestDataPath("$PROJECT_ROOT")
    public class Fqn {
        @Test
        public void testAllFilesPresentInFqn() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/box/fqn"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/class.kt");
        }

        @Test
        @TestMetadata("doesNotShadowParameter.kt")
        public void testDoesNotShadowParameter() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/doesNotShadowParameter.kt");
        }

        @Test
        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/enum.kt");
        }

        @Test
        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/function.kt");
        }

        @Test
        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/lambda.kt");
        }

        @Test
        @TestMetadata("metaAnnotation.kt")
        public void testMetaAnnotation() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/metaAnnotation.kt");
        }

        @Test
        @TestMetadata("multipleAnnotations.kt")
        public void testMultipleAnnotations() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/multipleAnnotations.kt");
        }

        @Test
        @TestMetadata("notTopLevelClass.kt")
        public void testNotTopLevelClass() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/notTopLevelClass.kt");
        }

        @Test
        @TestMetadata("notTopLevelProperties.kt")
        public void testNotTopLevelProperties() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/notTopLevelProperties.kt");
        }

        @Test
        @TestMetadata("shadowTopLevel.kt")
        public void testShadowTopLevel() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/shadowTopLevel.kt");
        }

        @Test
        @TestMetadata("twoFunctionsDifferentAnnotations.kt")
        public void testTwoFunctionsDifferentAnnotations() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/twoFunctionsDifferentAnnotations.kt");
        }

        @Test
        @TestMetadata("twoFunctionsSameAnnotation.kt")
        public void testTwoFunctionsSameAnnotation() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/twoFunctionsSameAnnotation.kt");
        }

        @Test
        @TestMetadata("variableWrite.kt")
        public void testVariableWrite() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/fqn/variableWrite.kt");
        }
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/box/valInjector")
    @TestDataPath("$PROJECT_ROOT")
    public class ValInjector {
        @Test
        public void testAllFilesPresentInValInjector() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/box/valInjector"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("lambda.kt")
        public void testLambda() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/valInjector/lambda.kt");
        }

        @Test
        @TestMetadata("metaAnnotation.kt")
        public void testMetaAnnotation() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/valInjector/metaAnnotation.kt");
        }

        @Test
        @TestMetadata("multipleAnnotationsAllTypes.kt")
        public void testMultipleAnnotationsAllTypes() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/valInjector/multipleAnnotationsAllTypes.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/valInjector/simple.kt");
        }

        @Nested
        @TestMetadata("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions")
        @TestDataPath("$PROJECT_ROOT")
        public class MultipleFunctions {
            @Test
            public void testAllFilesPresentInMultipleFunctions() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
            }

            @Test
            @TestMetadata("differentPackages.kt")
            public void testDifferentPackages() throws Exception {
                runTest("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions/differentPackages.kt");
            }

            @Test
            @TestMetadata("sameAnnotationArguments.kt")
            public void testSameAnnotationArguments() throws Exception {
                runTest("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions/sameAnnotationArguments.kt");
            }

            @Test
            @TestMetadata("sameFunctionName.kt")
            public void testSameFunctionName() throws Exception {
                runTest("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions/sameFunctionName.kt");
            }

            @Test
            @TestMetadata("sameInjectedName.kt")
            public void testSameInjectedName() throws Exception {
                runTest("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions/sameInjectedName.kt");
            }

            @Test
            @TestMetadata("sameMetaAnnotation.kt")
            public void testSameMetaAnnotation() throws Exception {
                runTest("plugins/function-scope-injector/testData/box/valInjector/multipleFunctions/sameMetaAnnotation.kt");
            }
        }
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/box/withHello")
    @TestDataPath("$PROJECT_ROOT")
    public class WithHello {
        @Test
        public void testAllFilesPresentInWithHello() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/box/withHello"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/anonymousFunction.kt");
        }

        @Test
        @TestMetadata("doesNotShadowLocalVariable.kt")
        public void testDoesNotShadowLocalVariable() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/doesNotShadowLocalVariable.kt");
        }

        @Test
        @TestMetadata("doesNotShadowParameter.kt")
        public void testDoesNotShadowParameter() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/doesNotShadowParameter.kt");
        }

        @Test
        @TestMetadata("inlineFunction.kt")
        public void testInlineFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/inlineFunction.kt");
        }

        @Test
        @TestMetadata("lambdaAsDefaultValue.kt")
        public void testLambdaAsDefaultValue() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/lambdaAsDefaultValue.kt");
        }

        @Test
        @TestMetadata("lambdaAsFunctionParameter.kt")
        public void testLambdaAsFunctionParameter() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/lambdaAsFunctionParameter.kt");
        }

        @Test
        @TestMetadata("lambdaAsProperty.kt")
        public void testLambdaAsProperty() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/lambdaAsProperty.kt");
        }

        @Test
        @TestMetadata("lambdaAsReturnValue.kt")
        public void testLambdaAsReturnValue() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/lambdaAsReturnValue.kt");
        }

        @Test
        @TestMetadata("localAccessibility.kt")
        public void testLocalAccessibility() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/localAccessibility.kt");
        }

        @Test
        @TestMetadata("localFunction.kt")
        public void testLocalFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/localFunction.kt");
        }

        @Test
        @TestMetadata("memberFunction.kt")
        public void testMemberFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/memberFunction.kt");
        }

        @Test
        @TestMetadata("shadowClassField.kt")
        public void testShadowClassField() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/shadowClassField.kt");
        }

        @Test
        @TestMetadata("shadowTopLevel.kt")
        public void testShadowTopLevel() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/shadowTopLevel.kt");
        }

        @Test
        @TestMetadata("topLevelFunction.kt")
        public void testTopLevelFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/topLevelFunction.kt");
        }

        @Test
        @TestMetadata("trailingLambda.kt")
        public void testTrailingLambda() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/trailingLambda.kt");
        }

        @Test
        @TestMetadata("twoFunctions.kt")
        public void testTwoFunctions() throws Exception {
            runTest("plugins/function-scope-injector/testData/box/withHello/twoFunctions.kt");
        }
    }
}
