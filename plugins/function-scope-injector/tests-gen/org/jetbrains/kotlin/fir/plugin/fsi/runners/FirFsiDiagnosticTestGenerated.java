/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.fir.plugin.fsi.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/function-scope-injector/testData/diagnostics")
@TestDataPath("$PROJECT_ROOT")
public class FirFsiDiagnosticTestGenerated extends AbstractFirFsiDiagnosticTest {
    @Test
    public void testAllFilesPresentInDiagnostics() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/diagnostics"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/diagnostics/byFunctionName")
    @TestDataPath("$PROJECT_ROOT")
    public class ByFunctionName {
        @Test
        public void testAllFilesPresentInByFunctionName() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/diagnostics/byFunctionName"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("isolation.kt")
        public void testIsolation() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/byFunctionName/isolation.kt");
        }
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/diagnostics/fqn")
    @TestDataPath("$PROJECT_ROOT")
    public class Fqn {
        @Test
        public void testAllFilesPresentInFqn() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/diagnostics/fqn"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("class.kt")
        public void testClass() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/fqn/class.kt");
        }

        @Test
        @TestMetadata("function.kt")
        public void testFunction() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/fqn/function.kt");
        }

        @Test
        @TestMetadata("isolation.kt")
        public void testIsolation() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/fqn/isolation.kt");
        }

        @Test
        @TestMetadata("metaAnnotation.kt")
        public void testMetaAnnotation() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/fqn/metaAnnotation.kt");
        }
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/diagnostics/valInjector")
    @TestDataPath("$PROJECT_ROOT")
    public class ValInjector {
        @Test
        public void testAllFilesPresentInValInjector() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/diagnostics/valInjector"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("isolation.kt")
        public void testIsolation() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/valInjector/isolation.kt");
        }

        @Test
        @TestMetadata("metaAnnotation.kt")
        public void testMetaAnnotation() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/valInjector/metaAnnotation.kt");
        }
    }

    @Nested
    @TestMetadata("plugins/function-scope-injector/testData/diagnostics/withHello")
    @TestDataPath("$PROJECT_ROOT")
    public class WithHello {
        @Test
        public void testAllFilesPresentInWithHello() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/function-scope-injector/testData/diagnostics/withHello"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("isolation.kt")
        public void testIsolation() throws Exception {
            runTest("plugins/function-scope-injector/testData/diagnostics/withHello/isolation.kt");
        }
    }
}
